<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.otclub.humate.domain.mate.mapper.PostMapper">

    <!-- 검색한 게시글 목록 반환 ResultMap -->
    <resultMap id="PostListResultMap" type="com.otclub.humate.domain.mate.dto.PostListResponseDTO">
        <id property="postId" column="post_id"/>
        <result property="nickname" column="nickname"/>
        <result property="profileImgUrl" column="profile_img_url"/>
        <result property="title" column="title"/>
        <result property="matchDate" column="match_date"/>
        <result property="matchBranch" column="match_branch"/>
        <result property="matchGender" column="match_gender"/>
        <result property="matchLanguage" column="match_language"/>
        <result property="createdAt" column="created_at"/>
        <result property="isMatched" column="is_matched"/>
        <collection property="tags" ofType="java.lang.String">
            <result property="tagName" column="tag_name"/>
        </collection>
    </resultMap>

    <!-- 매칭글 목록 전체 조회 -->
    <select id="selectAllPosts"
            parameterType="com.otclub.humate.domain.mate.dto.PostSearchFilterRequestDTO"
            resultMap="PostListResultMap">
        select
        p.post_id,
        m.nickname,
        m.profile_img_url,
        t.name as tag_name,
        p.title,
        p.match_date,
        p.match_branch,
        p.match_gender,
        p.match_language,
        p.created_at,
        p.is_matched
        from
        post p
        join member m on p.member_id = m.member_id
        left join post_tag pt on p.post_id = pt.post_id
        left join tag t on pt.tag_id = t.tag_id
        <!-- 기본 검색 조건 -->
        <!-- matchDate, matchBranch, matchLanguage, keyword에 대해서 검색 -->
        where 1=1
        and p.deleted_at is null
        <if test="matchDate != null">
            and p.match_date = #{matchDate, jdbcType=VARCHAR}
        </if>
        <if test="matchBranch != null">
            and p.match_branch = #{matchBranch, jdbcType=VARCHAR}
        </if>
        <if test="matchLanguage != null">
            and p.match_language like '%' || #{matchLanguage, jdbcType=VARCHAR} || '%'
        </if>
        <if test="keyword != null">
            and p.title like '%' || #{keyword, jdbcType=VARCHAR} || '%'
        </if>

        <!-- 외국인-한국인 매칭 -->
        <if test='memberId != null and memberId.startsWith("K")'>
            and m.member_id like 'F%'
        </if>

        <if test='memberId != null and memberId.startsWith("F")'>
            and m.member_id like 'K%'
        </if>

        <!-- 검색하는 사람의 성별 및 매칭 성별에 따른 조건 -->
        <choose>
            <!-- 검색하는 사람이 남성인 경우 -->
            <when test='gender == "m"'>
                <choose>
                    <!-- 매칭 원하는 성별이 여자인 경우 -->
                    <when test='matchGender != null and matchGender == "f"'>
                        and p.match_gender = 2 and m.gender = 'f'
                    </when>
                    <!-- 매칭 원하는 성별이 남자인 경우 -->
                    <when test='matchGender != null and matchGender == "m"'>
                        and m.gender = 'm'
                    </when>
                    <!-- 매칭 원하는 성별을 선택하지 않은 경우 -->
                    <otherwise>
                        and (p.match_gender = 2 or m.gender = 'm')
                    </otherwise>
                </choose>
            </when>

            <!-- 검색하는 사람이 여성인 경우 -->
            <when test='gender == "f"'>
                <choose>
                    <!-- 매칭 원하는 성별이 남자인 경우 -->
                    <when test='matchGender != null and matchGender == "m"'>
                        and p.match_gender = 2 and m.gender = 'm'
                    </when>
                    <!-- 매칭 원하는 성별이 여자인 경우 -->
                    <when test='matchGender != null and matchGender == "f"'>
                        and m.gender = 'f'
                    </when>
                    <!-- 매칭 원하는 성별을 선택하지 않은 경우 -->
                    <otherwise>
                        and (p.match_gender = 2 or m.gender = 'f')
                    </otherwise>
                </choose>
            </when>

        </choose>

        <!-- 태그 이름 리스트에 대한 검색 -->
        <if test="tags != null and tagCount > 0">
            and p.post_id in (
                select pt.post_id
                from post_tag pt
                join tag t on pt.tag_id = t.tag_id
                where t.name in
                <foreach collection="tags" item="tag" open="(" separator="," close=")">
                    trim(#{tag})
                </foreach>
                group by pt.post_id
                having count(distinct t.name) = #{tagCount}
            )
        </if>
    </select>

    <!-- 매칭글 등록 -->
    <insert id="insertPost" parameterType="com.otclub.humate.common.entity.Post"
            useGeneratedKeys="true" keyProperty="postId">
        <selectKey keyProperty="postId" resultType="java.lang.Integer" order="BEFORE">
            select seq_post.nextval from dual
        </selectKey>
        <![CDATA[
            insert into post (
                post_id, member_id, title, content,
                match_date, match_branch, match_gender, match_language,
                created_at, deleted_at, is_matched
            )
            values (
                #{postId}, #{memberId}, #{title}, #{content},
                #{matchDate, jdbcType=VARCHAR}, #{matchBranch, jdbcType=VARCHAR}, #{matchGender}, #{matchLanguage, jdbcType=VARCHAR},
                SYSDATE, NULL, 0
            )
        ]]>
    </insert>

    <!-- 장소(매장 및 팝업스토어) 등록 -->
    <insert id="insertPostPlace" parameterType="com.otclub.humate.common.entity.PostPlace">
        <![CDATA[
            insert into post_place (post_place_id, post_id, type, name)
            values (seq_post_place.nextval, #{postId}, #{type}, #{name})
        ]]>
    </insert>

    <!-- 매칭글 태그 등록 -->
    <insert id="insertPostTag" parameterType="com.otclub.humate.common.entity.PostTag">
        <![CDATA[
            insert into post_tag (post_tag_id, post_id, tag_id)
            values (seq_post_tag.nextval, #{postId}, #{tagId})
        ]]>
    </insert>

    <!-- 매칭글 postId로 상세 조회 -->
    <select id="selectPostById" resultType="com.otclub.humate.domain.mate.dto.PostBasicDetailResponseDTO">
        <![CDATA[
            select
                p.member_id, p.title, p.content,
                p.match_date, p.match_branch, p.match_gender, p.match_language, p.is_matched,
                m.profile_img_url as profileImgUrl
            from post p
                join member m on p.member_id = m.member_id
            where p.post_id = #{postId}
        ]]>
    </select>

    <!-- 매칭글 장소(매장 및 팝업스토어) postId로 상세 조회 -->
    <select id="selectPostPlaceById" resultType="com.otclub.humate.domain.mate.dto.PostPlaceDetailResponseDTO">
        <![CDATA[
            select type, name
            from post_place
            where post_id = #{postId}
        ]]>
    </select>

    <!-- 매칭글 태그 postId로 상세 조회 -->
    <select id="selectPostTagById" resultType="com.otclub.humate.domain.mate.dto.PostTagDetailResponseDTO">
        <![CDATA[
            select t.category, t.name
            from tag t
                 inner join post_tag pt on t.tag_id = pt.tag_id
            where pt.post_id = #{postId}
        ]]>
    </select>

    <!-- postId를 사용한 매칭글 존재 확인 -->
    <select id="selectPostCountById" resultType="boolean">
        <![CDATA[
            select
                case
                    when count(*) > 0 then 1
                    else 0
                    end
            from post
            where post_id = #{postId}
        ]]>
    </select>

    <!-- 매칭글 키워드 검색 -->
    <select id="selectPostByKeyword" resultType="com.otclub.humate.domain.mate.dto.PostListResponseDTO">
        <![CDATA[
            select
                p.post_id,
                m.nickname,
                m.profile_img_url,
                t.tag_name,
                p.title,
                p.match_date,
                p.match_branch,
                p.match_gender,
                p.match_language,
                p.created_at,
                p.is_matched
            from
                post p
            join member m on p.member_id = m.member_id
            left join (
                select
                    pt.post_id,
                    listagg(t.name, ',') within group (order by t.name) as tag_name
                from
                    post_tag pt
                        join tag t on pt.tag_id = t.tag_id
                group by
                    pt.post_id
            ) t on p.post_id = t.post_id
            where p.title like '%' || #{keyword} || '%'
        ]]>
    </select>

    <!-- 매칭글 삭제 -->
    <update id="deletePost">
        <![CDATA[
            update post
            set deleted_at = SYSDATE
            where post_id = #{postId}
              and deleted_at is null
        ]]>
    </update>

    <select id="selectPostByPostId">
        select
            *
        from
            post
        where
            post_id = #{postId}
    </select>

</mapper>